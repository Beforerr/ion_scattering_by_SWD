{
  "hash": "9936864e7aea96b4468305d47a003658",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nexecute: \n  eval: false\n  freeze: true\n---\n\n\n\n# Compare the effect of coherent structures on test particle dynamics (surrogate testing)\n\n[JuliaDynamics/TimeseriesSurrogates.jl: A Julia package for generating timeseries surrogates](https://github.com/JuliaDynamics/TimeseriesSurrogates.jl)\n\n\n\n\n```{julia}\nusing CurrentSheetTestParticle\nusing TestParticle\nusing StaticArrays\nusing TimeseriesSurrogates, CairoMakie\ninclude(\"../src/io.jl\")\ninclude(\"../src/plot.jl\")\ninclude(\"../src/utils.jl\")\n```\n\n```{julia}\nv = 8\nβ = 47.5 # CurrentSheetTestParticle.DEFAULT_β\nθ = 85 # CurrentSheetTestParticle.DEFAULT_θ\ninit_kwargs = (; Nw=90, Nϕ=120)\nsave_everystep = false\n# start = CurrentSheetTestParticle.init_z_pos(v) |> abs\nz = range(-3, 3; length=4086)\nφ = β * tanh.(z)\nd = ProblemParams(; v, β, θ, init_kwargs)\n```\n\n```{julia}\nmethod = RandomFourier(true)\nmethod = RelativePartialRandomization()\nmethod = IAAFT()\ns = surrogate(φ, method)\nsurroplot(φ, s)\n```\n\n```{julia}\nBx = sind(θ) .* sind.(φ)\nBx_s = sind(θ) .* sind.(s)\n```\n\n```{julia}\nBy = sind(θ) .* cosd.(φ)\nBy_s = sind(θ) .* cosd.(s)\n# surroplot(By, By_s)\n```\n\n```{julia}\nB_s = let B = zeros(3, length(z))\n    B[1, :] .= Bx_s\n    B[2, :] .= By_s\n    B[3, :] .= cosd(θ)\n    E(x) = SVector(0.0, 0.0, 0.0)\n    param = prepare(z, E, B; species=User, i=3)\n    param[3].field_function\nend\n```\n\n```{julia}\nsols_s, (wϕs,) = solve_params(B_s, v; init_kwargs, save_everystep);\nresult_s = process_sols(sols_s, B_s, wϕs)\nsols, (wϕs, B) = solve_params(d; save_everystep);\nresult = process_sols(sols, B, wϕs)\n\nresult.tmax .= CurrentSheetTestParticle.DEFAULT_TSPAN[2]\nresult_s.tmax .= CurrentSheetTestParticle.DEFAULT_TSPAN[2]\n```\n\n```{julia}\nusing GLMakie\nusing AlgebraOfGraphics\nGLMakie.activate!()\n```\n\n```{julia}\nlet v = histogram(; bins=64), dfs = subset_leave(result_s), df0 = subset_leave(result)\n    fig = Figure()\n    \n    ps = fig[1, 1]\n    plts = data(dfs) * mapping(xyw...) * v\n    fg = draw!(ps, plts; axis=w_axis)\n    colorbar!(ps[1,2], fg)\n    Label(ps[0, 1], \"Surrogate\"; tellwidth=false)\n\n    p0 = fig[1, 2]\n    plt0 = data(df0) * mapping(xyw...) * v\n    draw!(p0, plt0; axis=w_axis)\n    colorbar!(p0[1,2], fg)\n    Label(p0[0, 1], \"Original\"; tellwidth=false)\n\n    Label(fig[0, 1:end], \"θ = $(d.θ)°, β = $(d.β)°\")\n\n    surroplot!(fig[2, 1], φ, s)\n    surroplot!(fig[2, 2], Bx, Bx_s)\n    surroplot!(fig[2, 3], By, By_s)\n\n    Label(fig[2, 1][0, 1], \"φ\"; tellwidth=false)\n    Label(fig[2, 2][0, 1], \"Bx\"; tellwidth=false)\n    Label(fig[2, 3][0, 1], \"By\"; tellwidth=false)\n\n    fig\nend\n```\n\n",
    "supporting": [
      "03_surrogate_files"
    ],
    "filters": [],
    "includes": {}
  }
}