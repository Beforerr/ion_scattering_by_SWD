{
  "hash": "e14b829ac2b926ccde9b6a455bcf88ff",
  "result": {
    "engine": "julia",
    "markdown": "---\nexecute: \n  eval: false\nengine: julia\n---\n\n\n\n\nHow would normalization affect the transition matrix?\n\n\n\n\n::: {#2 .cell execution_count=0}\n``` {.julia .cell-code}\nusing DrWatson\nusing CurrentSheetTestParticle\nusing CurrentSheetTestParticle: inverse_v\nusing Beforerr\ninclude(\"../src/utils.jl\")\ninclude(\"../src/plot.jl\")\ntmax = CurrentSheetTestParticle.DEFAULT_TSPAN[2]\nsave_everystep = false\nverbose = false\ndtmax = 1e-1\ndiffeq = (; save_everystep, verbose, dtmax)\n```\n:::\n\n\n\n::: {#4 .cell execution_count=0}\n``` {.julia .cell-code}\np = ProblemParams(\n    θ=85, β=45, v=64.0, init_kwargs=(; Nw=256, Nϕ=256)\n)\nsols, (wϕs, B) = solve_params(p; diffeq...);\nresults = process_sols(sols, B, wϕs)\nresults.iter .= 1\n```\n:::\n\n\n\n::: {#6 .cell execution_count=0}\n``` {.julia .cell-code}\n\nfunction iterate_results(results; iter=3)\n    results_i = [results]\n    for i in range(1, iter)\n        old_u0s = results_i[i].u1\n        new_u0s = map(old_u0s) do u0\n            [u0[1:2]..., -u0[3], u0[4:6]...]\n        end\n        sols = solve_params(B, new_u0s; diffeq...)\n        results = process_sols(sols, B, wϕs)\n        results.iter .= i + 1\n        push!(results_i, results)\n    end\n    vcat(results_i...)\nend\n```\n:::\n\n\n\n\n\n\n## Distribution\n\n\n\n\n::: {#8 .cell execution_count=0}\n``` {.julia .cell-code}\nusing DataFramesMeta\n\nfunction process_results_gryo!(df)\n    @chain df begin\n        @rtransform!(:ψ1 = inverse_v(:u1, :B)[3])\n        @transform!(:Δψ = rem2pi.(:ψ1 - :ϕ0, RoundDown))\n    end\nend\n\n@chain results begin\n    process_results_gryo!\nend\n```\n:::\n\n\n\n::: {#10 .cell execution_count=0}\n``` {.julia .cell-code}\nw_bins = range(-1, 1, length=129)\nα_bins = range(0, 180, length=129)\nsinα_bins = range(0, 1, length=63)\n\nf = Figure(; size=(1200, 600))\nl = data(results) * mapping(row=AlgebraOfGraphics.dims(1) => renamer([\"Initial\", \"Final\"]), col=:iter => nonnumeric)\nnormalization = :probability\ndraw!(f[1, 1], l * mapping([w0, w1] .=> \"cos(α)\") * histogram(; bins=w_bins, normalization))\ndraw!(f[1, 2], l * mapping([α0, α1] .=> \"α\") * histogram(; bins=α_bins, normalization))\ndraw!(f[1, 3], l * mapping([:s2α0, :s2α1] .=> \"sin(α)^2\") * histogram(; bins=sinα_bins, normalization))\nf\n```\n:::\n\n\n\n::: {#12 .cell execution_count=0}\n``` {.julia .cell-code}\nψ_bins = range(0, 2π, length=32)\n\ndraw(l * mapping([ϕ0, :ψ1] .=> \"ψ\"; layout=leave) * histogram(; bins=ψ_bins))\n\ndraw(data(results) * mapping(:Δψ; layout=leave) * histogram())\n```\n:::\n\n\n\n\n\n\n## Transition matrix\n\n\n\n\n::: {#14 .cell execution_count=0}\n``` {.julia .cell-code}\ninclude(\"../src/tm.jl\")\nweights = 1 ./ results.t1\ntm = transition_matrix_w(results)\ntm_w = transition_matrix_w(results; weights)\n```\n:::\n\n\n\n::: {#16 .cell execution_count=0}\n``` {.julia .cell-code}\nlet i = 5, lowclip = 1e-5, colorscale = log10, colorrange = (lowclip, 10)\n    kw = (; colorscale, colorrange)\n    f = Figure()\n\n    tmi = tm^i\n    @show sum(tmi; dims=2)\n    @show sum(tmi; dims=1)\n\n    plot!(Axis(f[1, 1]), tm; kw...)\n    plot!(Axis(f[2, 1]), tmi; kw...)\n    plot!(Axis(f[1, 2]), tm_w; kw...)\n    plot!(Axis(f[2, 2]), tm_w^i; kw...)\n    easy_save(\"tm/tm_weighted\")\nend\n```\n:::\n\n\n\n::: {#18 .cell execution_count=0}\n``` {.julia .cell-code}\nlet i = 16, df = results, binedge = range(0, 1, length=64)\n    kw = (;)\n    binedges = (binedge, binedge)\n    h = Hist2D((df.s2α0, df.s2α1); binedges)\n    tm = transition_matrix(h)\n    tmi = tm^i\n    f = Figure()\n    plot!(Axis(f[1, 1]), tm; kw...)\n    plot!(Axis(f[2, 1]), tmi; kw...)\n    @info sum(tmi; dims=1)\n    @info sum(tmi; dims=2)\n    f\nend\n```\n:::\n\n\n\n::: {#20 .cell execution_count=0}\n``` {.julia .cell-code}\nψ_scale() = scales(Color=(; colormap=:brocO))\n\nlet df = results, xy = (w0, ϕ0), figure = (; size=(1200, 600))\n    f = Figure(; figure...)\n\n    spec = data(results) * mapping(xyw...) * density_layer()\n    cdraw!(f[1, 1], spec, tm_scale(); axis=w_axis)\n\n    gl = f[1, 2]\n    l = data(df) * mapping(xy...)\n    cdraw!(gl[1, 1], l * (; color=Δw))\n    cdraw!(gl[2, 1], l * (; color=Δt))\n    cdraw!(gl[3, 1], l * (; color=:ψ1,), ψ_scale(); colorbar=(; colormap=(:brocO)))\n    # cdraw!(gl[3, 1], l * (; color=(:Δw, :t1) => (x, y) -> x / y))\n\n    easy_save(\"tm/Δw_Δt\")\nend\n```\n:::\n\n\n\n\n\n\n### Averaging\n\n\n\n\n::: {#22 .cell execution_count=0}\n``` {.julia .cell-code}\nusing StatsBase\nresults_avg = combine(groupby(results, :w0), :Δψ => mean, :Δw => mean; renamecols=false)\nsort!(results_avg, :w0)\nresults_avg.Δw_cumsum .= cumsum(results_avg.Δw)\n\nr = renamer([\"<Δψ>\", \"<Δ cos α>\", \"<Δ cos α> cumsum\"])\nys = [:Δψ, :Δw,]\ndraw(data(results_avg) * mapping(w0, ys; color=dims(1) => r) * visual(Scatter))\n```\n:::\n\n\n\n\n\n\n## Cumulative distribution\n\n\n\n\n::: {#24 .cell execution_count=0}\n``` {.julia .cell-code}\ninclude(\"../src/jump.jl\")\n```\n:::\n\n\n\n::: {#26 .cell execution_count=0}\n``` {.julia .cell-code}\ns2α_jumps = df_rand_jumps(results, :s2α0, :Δs2α; n=100)\nw_jumps = df_rand_jumps(results, :w0, :Δw; n=100)\n\nusing CairoMakie\n\nlet position = :rb,\n\n    mid_index = div(size(s2α_jumps, 1), 2)\n\n    f = Figure(;)\n    ax = Axis(f[1, 1]; xlabel=\"sin(α)^2\", ylabel=\"F\")\n    ecdfplot!(s2α_jumps[1, :]; label=\"Initial\")\n    ecdfplot!(s2α_jumps[mid_index, :]; label=\"Intermediate\", color=Cycled(2))\n    ecdfplot!(s2α_jumps[end, :]; label=\"Final\", color=Cycled(3))\n\n    Axis(f[1, 2]; xlabel=\"cos(α)\")\n    ecdfplot!(w_jumps[1, :]; label=\"Initial\")\n    ecdfplot!(w_jumps[mid_index, :]; label=\"Intermediate\", color=Cycled(2))\n    ecdfplot!(w_jumps[end, :]; label=\"Final\", color=Cycled(3))\n\n    Legend(f[0, 1:end], ax; tellheight=true, orientation=:horizontal)\n    easy_save(\"pa_cdf\")\nend\n```\n:::\n\n\n\n\n\n\n![](../figures/pa_cdf.png)\n\n\n\n\n::: {#28 .cell execution_count=0}\n``` {.julia .cell-code}\n# calculate the moments of the distribution\nlet jumps = s2α_jumps\n    diffs = jumps .- jumps[1, :]'\n    m1 = mean(diffs, dims=2)\n    m2 = mean(diffs .^ 2, dims=2) - m1 .^ 2\n    scatterlines(vec(m2))\nend\n```\n:::\n\n\n",
    "supporting": [
      "04_normalization_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}